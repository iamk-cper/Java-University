// Kacper Mycka - nr grupy 2
import java.util.Scanner;

class Source {
    public static Scanner sc = new Scanner(System.in);

    public Source() { // konstruktor obsluguje caly algorytm po stworzenu zmiennej typu Source
        int setsnum = sc.nextInt(); // ilosc setow, pierwsza dana
        for (int x = 1; x <= setsnum; x++) { // wykonanie dla kazdego seta
            sc.nextLine(); // nextLine bedzie przechodzic do kolejnej linii, wymagany format do bacy
            sc.skip(x + " : "); // pomija "%d : ", czyli nr seta i " : ", bo pozniej nie sa juz uzywane
            int n = sc.nextInt();
            int m = sc.nextInt(); // zapisuje ilosc kolumn i wierszy


            int array[][] = new int[n][m]; // tablica z ktorej wyliczac bedziemy najwieksza podtablice
            for (int a = 0; a < n; a++) { // prosta petla sluzaca uzupelnieniu tablicy wartosciami
                sc.nextLine();
                for (int b = 0; b < m; b++) {
                    array[a][b] = sc.nextInt();
                }
            }
            
            // teraz nalezy znalezc najwieksza podtablice w zlozonosci max n3
            // n kolumny
            // m wiersze
            int[] result = new int[4]; // result[0] - indeks pierwszego wiersza maksymalnej podtablicy, result[1] - pierwsza kolumna
                                       // result[2] - ostatni wiersz, result[3] - ostatnia kolumna
            int maxSum = -1; // suma najwiekszej podtablicy, jezeli na koniec -1 to wszystkie dane w tablicy ujemne
            
            for (int i = 0; i < m; i++) {
                int[] colSums = new int[n]; // bedzie zbieral sumy z aktualnie uzywanego przedzialu wierszy w odpowiadajacej kolumnie
                for (int j = i; j < m; j++) {
                    int sum = 0; // suma chwilowa
                    int startRow = 0; // chwilowy indeks pierwszego wiersza
                    for (int k = 0; k < n; k++) {
                        colSums[k] += array[k][j]; // dodajemy do kolumny wartosc uzywanego aktualnie wiersza, dzieki temu nie musimy co iteracje dodawac wszystkich wartosci z danej kolumny
                        sum += colSums[k]; // do sumy dodajemy wartosc z nowej kolumny w aktualnym przedziale wierszy
                        
                        if (sum <= -1) { // opisane jednego ifa nizej analogicznie
                            sum = 0; 
                            startRow = k + 1;
                        }
                        else if (sum > maxSum) { // wieksza sum chwilowa to oczywisce zamiana koncowych indeksow i zachowanie jej jako najwiekszej
                            maxSum = sum;
                            result[0] = i;
                            result[1] = startRow;
                            result[2] = j;
                            result[3] = k; 
                        }
                        else if (sum == maxSum) { // jezeli chwilowa suma jest rowna sumie najwiekszej to rowniez moze zastapic jej indeksy
                            int currentArea = (j - i + 1) * (k - startRow + 1); // zmienne current Area oraz prevArea dodane wylacznie do zwiekszenia czytelnosci ponizszego ifa
                            int prevArea = (result[2] - result[0] + 1) * (result[3] - result[1] + 1); // currArea - wielkosc aktualnej podtablicy, pervArea - wielkosc dotychczasowej najwiekszej podtablicy
                            if (currentArea < prevArea || (currentArea == prevArea && k < result[3])) { // zamieni result dla mniejszej niz dotychczasowa najwieksza podtablica lub dla rownej wielkosci, ale mniejszej w porzadku leksykograficznym
                                result[0] = i;                                                          // ze wzgledu na charakterystyke mojego algorytmu, wystarczy porownac k i result[3] dla porzadku
                                result[1] = startRow;
                                result[2] = j;
                                result[3] = k;
                            }
                        }
                        if (sum == 0) {       //jezeli suma jest rowna 0 to nie bedzie ona nigdy najwieksza suma poza pierwszym napotkanym zerem, jesli inne dane sa ujemne
                            startRow = k + 1; //szukamy od kolejnego wiersza, poniewaz jesli bedziemy dodawac do aktualnego to przy sumie 0 na pewno bedzie mial wieksze rozmiary 
                        }
                    }
                }
            }
            if (maxSum > -1) { // printf wykorzystuje obliczone dane i umieszcza je w poprawnym formacie
                System.out.printf("%d: n = %d m = %d, ms = %d, mst = a[%d..%d][%d..%d]\n", x, n, m, maxSum, result[1], result[3], result[0], result[2]);
            }
            else { // jezeli maxsum nie zostal zmodyfikowany przez caly algorytm oznacza to same liczby ujemne w tablicy
                System.out.printf("%d: n = %d m = %d, ms = 0, mst is empty\n", x, n, m);
            }

        }
    }
    public static void main( String [] args ) { 
        Source src = new Source(); // wykona caly algorytm
    }
}
